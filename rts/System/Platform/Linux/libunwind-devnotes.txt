***
*** Please delete or relocate this file when merging the libunwind feature branch.
***

Development notes for the libunwind feature branch
--------------------------------------------------

Outstanding issues:

- ThreadControls::Suspend() is not guaranteed to return before the thread actually suspends.
Instead of a mutex, use a semaphore so that the number of threads waiting on the lock can be checked.
Before returning, spinwait on the number of waiters so that we know the foreign thread is locked.

- CrashHandler.cpp has an ugly static variable "reentrances" which prevents the signal handler from
re-entering itself too many times (for example if there were a SIGSEGV inside the signal handler that
re-triggered the signal and caused it to be called inside of itself.)
This is a sloppy implementation because this variable can be incremented in parallel if errors happen
in multiple threads at once. A better approach would be to use boost::thread_specific_ptr to hold
an integer that counts re-entries. The re-entry limit should be set to some low number (2 or 3) so
that errors inside the signal handler can be caught and identified but they will not trigger
infinite recursion.

- OutputStacktrace() still likely calls the "classic" Stacktrace function and not the libunwind version.
So, explicit stack traces are still using non-libunwind code.

- I cannot test win32 builds so I don't know if I've broken anything.
