#############################################
#architecture specific files / include pathes
import sys
windows_include_path=['include/windows']
linux_include_path=['include/linux','include/unix','/usr/include','/usr/include/freetype2','/usr/include/GL']
common_include_path = ['.','gui','include']
common_files=[]
windows_files=[]
linux_files=[]
if sys.platform == 'linux2' or sys.platform == 'linux-i386':
	print "Detected platform : linux"
	detected_platform='linux'
else:
	print "Platform not supported yet, please edit SConstruct file"
	detected_platform='unknown'
defines = []
exclude_list = []

##################################
# build options

opts = Options('SCustomize')

#permanent options
opts.Add('platform', 'Set to linux or windows', detected_platform)
opts.Add('debug', 'Set to yes to produce a binary with debug informations', 1)

#porting options - mandatory
opts.Add('disable_dll', 'Set to no to enable MSwindows dll (port using glib)', 1)

#porting options - optionnal in a first phase
opts.Add('disable_sound', 'Set to no to turn on sound support (directSound) (port using openal)', 1)
opts.Add('disable_avi', 'Set to no to turn on avi support', 1)
opts.Add('disable_shadows', 'Set to no to turn on shadows rendering', 1)
opts.Add('disable_clipboard', 'Set to no to turn on clipboard code', 1)

#options used while porting
opts.Add('enable_smallfixes', 'Set to yes to enable small fixes that have to be checked/cleaned', 1)
opts.Add('emule_wintypes', '(Ported/TobeChecked) Set to no to turn off windows type emulation (replace by glib types))', 1)
opts.Add('use_glut', 'Set to yes to replace MSwindows windows handling code by GLUT', 1)
opts.Add('use_portable_io', 'Set to yes to replace MSwindows windows io code by portable one', 1)
opts.Add('force_glextensions', 'Skip gl extensions test for porting purpose', 0)

#other ported parts
opts.Add('disable_hpi', 'Set to no to turn on hpi support : a new lib has to be created to provide calls', 0)
opts.Add('disable_windows', '(Notused) Set to no to enable windows code and MSwindows messages (port using glut)', 0)
opts.Add('disable_inputs', '(Notused) Set to no to enable input handling code (port using glut))', 0)
opts.Add('disable_texture_filtering', 'Set to no to turn on texture filtering code', 0)
opts.Add('disable_advtreedrawer', 'Set to no to turn on advanced tree drawing', 0)

opts.Add('disable_7zip', 'Set to disable 7zip processing', 1)
opts.Add('use_tcmalloc', 'Use tcmalloc from goog-perftools for memory allocation',0)

env = Environment(options = opts)
Help(opts.GenerateHelpText(env))
debug = env.get('debug')
platform = env.get('platform')

if env.get('disable_sound'):
	exclude_list.append("wavread.cpp")
	defines+=['NO_SOUND']
if env.get('disable_shadows'):
	defines+=['NO_SHADOWS']
if env.get('disable_hpi'):
	defines+=['NO_HPI']
if env.get('use_glut'):
	defines+=['USE_GLUT']
if not env.get('use_portable_io'):
	defines+=['USE_WIN32_IO']
if env.get('disable_clipboard'):
	defines+=['NO_CLIPBOARD']
if env.get('disable_windows'):
	defines+=['NO_WINDOWS']
if env.get('disable_dll'):
	defines+=['NO_DLL']
if env.get('emule_wintypes'):
	defines+=['EMULE_WINTYPES']
if env.get('disable_inputs'):
	defines+=['NO_INPUT']
if env.get('enable_smallfixes'):
	defines+=['ENABLE_SMALLFIXES','ENABLE_CPPFIX']	
if env.get('disable_texture_filtering'):
	defines+=['NO_TEXTURES']
	exclude_list+=Split(""" TextureHandler.cpp
				TextureFilters_hq2x.cpp
				TextureFilters_2xsai.cpp
				TextureFilters_hq4x.cpp""")
if env.get('disable_avi'):
	exclude_list.append("AVIGenerator.cpp")
	defines+=['NO_AVI']
if env.get('disable_advtreedrawer'):
	exclude_list+=Split("""AdvTreeGenerator.cpp AdvTreeDrawer.cpp""")
	defines+=['NO_NICETREES']
if env.get('force_glextensions'):
	defines+=['FORCE_GL_EXTENSIONS']
lzmafiles=[]
if env.get('disable_7zip'):
	defines+=['NO_7ZIP']
	exclude_list.append("Archive7ZipDll.cpp")
else:
	defines+=['_FILE_OFFSET_BITS=64','_LARGEFILE_SOURCE','NDEBUG','_REENTRANT','ENV_UNIX','EXCLUDE_COM','NO_REGISTRY','FORMAT_7Z','FORMAT_BZIP2','FORMAT_ZIP','FORMAT_TAR','FORMAT_GZIP','COMPRESS_LZMA','COMPRESS_BCJ_X86','FORMAT_SPLIT','FORMAT_Z','COMPRESS_BCJ2','COMPRESS_COPY','COMPRESS_MF_MT','COMPRESS_PPMD','COMPRESS_DEFLATE','COMPRESS_DEFLATE64','COMPRESS_IMPLODE','COMPRESS_BZIP2','CRYPTO_ZIP','CRYPTO_7ZAES','CRYPTO_AES']
	#lzmafiles+=['7zip/7zip/Common/FileStreams.cpp','7zip/Windows/PropVariantConversions.cpp','lib7za.a']
	lzmafiles+=['lib7za.a']

if detected_platform == 'linux':
	exclude_list.append("RegHandler.cpp")
else:
	exclude_list.append("dotfileHandler.cpp")

env.Append(CPPDEFINES = defines)

############################################################
# files used for build
zipfiles=["./minizip/ioapi.c","./minizip/zip.c","./minizip/unzip.c"]
winzipfiles=["./minizip/iowin32.c"]

import os
import re
tmp=os.listdir('.')
guif=os.listdir('gui')
for f in guif:
	tmp.append("./gui/"+f)
hpiutilf=os.listdir('hpiutil2')
for f in hpiutilf:
	tmp.append("./hpiutil2/"+f)
	
#linux disable unused code
if platform == 'linux':	
	exclude_list += exclude_list + Split("""
			ARB_vertex_program_extension.cpp
			mmgr.cpp
			multipath.cpp
			estimater.cpp""")

nbObjects=0
nbBuiltObjects=0
for f in tmp:
	if os.path.isfile(f) and re.compile("cpp$").search(f) and not f in exclude_list:
		common_files.append(f)
		nbObjects+=1
	if re.compile("\.o$").search(f):
		nbBuiltObjects+=1
if platform == 'windows':
	files = windows_files + common_files + zipfiles + winzipfiles + lzmafiles
	common_include_path = common_include_path + windows_include_path
else:
	if platform == 'linux':
		files = linux_files + common_files + zipfiles + lzmafiles
		common_include_path = common_include_path + linux_include_path	
	else:
		print "Unknown platform ", platform
		Exit(1)	
print nbObjects, " objects have to be produced"
print nbBuiltObjects, " objects are already produced from a previous build (", nbBuiltObjects*1./(nbObjects*1.)*100.,"%)\n"

#################################################
# other FLAGS
if debug: #to use debug, please use SCustomize file
	env.Append(CPPFLAGS = ['-ggdb3','-D_DEBUG','-DDEBUG'])
else:
	env.Append(CPPFLAGS = [''])
#	env.Append(CPPFLAGS = ['i-O2'])

if platform == 'linux':
	env.Append(CPPFLAGS = ['-pthread'])

#################################################
# Check requirements

lib=['GL','glut','GLEW','jpeg','freetype','GLU','IL']

print "\nChecking header files"
conf = Configure(env)
conf.env.Append(CPPPATH=common_include_path)
if not conf.CheckCHeader(['ft2build.h']):
	print ' dev freetype must be installed!'
	Exit(1)
if not conf.CheckCHeader(['GL/glut.h']):
	print ' A dev implementation of GLUT must be installed!'
	Exit(1)
if not conf.CheckCHeader(['GL/glew.h']):
	print ' Cannot find GLEW http://glew.sourceforge.net'
	Exit(1)
if not conf.CheckCXXHeader('boost/cstdint.hpp'):
	print ' Boost library must be installed'
	Exit(1)
if not conf.CheckCXXHeader('boost/thread.hpp'):
	print ' Cannot find Boost threading headers'
	Exit(1)
if not conf.CheckCXXHeader('boost/filesystem/path.hpp'):
	print ' Cannot find Boost filesystem headers'
	Exit(1)
if not conf.CheckCXXHeader('boost/regex.hpp'):
	print ' Cannot find Boost regex header'
	Exit(1)
if not conf.CheckCHeader('IL/il.h'):
	print ' Cannot find DevIL image library header'
	Exit(1)
if conf.CheckCHeader('libaio.h'):
	defines+=['HAS_LIBAIO']
else:
	print ' Cannot find libaio headers, disabling asynchronous I/O'
#if not conf.CheckCHeader('glib.h'):
#	print ' a dev implementation of glib must be installed!'
#	Exit(1)

print "\nChecking libraries"
if not conf.CheckLib('libc'):
	print "You need libc to compile this program"
	Exit(1)
if not conf.CheckLib('GLEW'):
	print "You need GLEW to compile this program"
	Exit(1)
#if not conf.CheckLib('glib'):
#	print "You need glib to link this program"
#	Exit(1)
if not conf.CheckLib('jpeg'):
	print "You need libjpeg to compile this program"
	Exit(1)
if conf.CheckLib('boost_filesystem-gcc-mt'):
	lib+=['boost_filesystem-gcc-mt']
elif conf.CheckLib('boost_filesystem-mt'):
	lib+=['boost_filesystem-mt']
elif conf.CheckLib('boost_filesystem-gcc'):
	lib+=['boost_filesystem-gcc']
elif conf.CheckLib('boost_filesystem'):
	lib+=['boost_filesystem']
else:
	print "You need the Boost filesystem library for this program"
	Exit(1)
if conf.CheckLib('boost_thread-gcc-mt'):
	lib+=['boost_thread-gcc-mt']
elif conf.CheckLib('boost_thread-mt'):
	lib+=['boost_thread-mt']
elif conf.CheckLib('boost_thread-gcc'):
	lib+=['boost_thread-gcc']
elif conf.CheckLib('boost_thread'):
	lib+=['boost_thread']
else:
	print "You need the Boost thread library for this program"
	Exit(1)
if conf.CheckLib('boost_regex-gcc-mt'):
	lib+=['boost_regex-gcc-mt']
elif conf.CheckLib('boost_regex-mt'):
	lib+=['boost_regex-mt']
elif conf.CheckLib('boost_regex-gcc'):
	lib+=['boost_regex-gcc']
elif conf.CheckLib('boost_regex'):
	lib+=['boost_regex']
else:
	print "You need the Boost regex library for this program"
	Exit(1)
if not conf.CheckLib('IL'):
	print "You need the DevIL image library for this program"
	Exit(1)
if conf.CheckLib('aio'):
	lib+=['aio']
else:
	print "Libaio is necessary for asynchronous I/O, disabling BackgroundReader"
env = conf.Finish()

###################################################
# let's build

print "\nEverything seems OK, let's build"
#print "\nCCFLAGS : ", env['CCFLAGS'],"\n"
#env.Program('spring', files,  LIBS=['GL','glut','GLEW','jpeg','freetype','glib','GLU', 'libboost_filesystem'], CPPPATH=common_include_path)
if env.get('use_tcmalloc'):
	lib+=['tcmalloc']
env.Program('spring', files,  LIBS=lib, CPPPATH=common_include_path)
